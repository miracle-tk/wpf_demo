<Window x:Class="FileWatcher.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FileWatcher"
        xmlns:model="clr-namespace:FileWatcher.Model"
        
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:converter="clr-namespace:FileWatcher.converter"
        mc:Ignorable="d"
        Title="MainWindow" Height="600" Width="1200" FontFamily="Microsoft YaHei UI" Background="#cccccc">
    <Window.Resources>
        <converter:ImagepathTofontConverter x:Key="fontconverter"/>
        <converter:ImagepathToForegroundConverter x:Key="foregroundconverter"/>
        <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Foreground" Value="{Binding (TextElement.Foreground), RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type FrameworkElement}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="FocusVisualStyle">
                <Setter.Value>
                    <Style>
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Width" Value="37"/>
            <Setter Property="Height" Value="37"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition From="*" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Checked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="45"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.581"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="4.875"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1.875"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle2">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-45"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle2">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.581"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle2">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="4.832"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle2">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-2.082"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle1">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.889"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle1">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="canvas">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>-->
                                            </Storyboard>
                                        </VisualTransition>
                                        <VisualTransition From="Checked" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" To="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle2">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle2">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle2">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle2">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle1">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle1">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="canvas">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>-->
                                            </Storyboard>
                                        </VisualTransition>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="45" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle"/>
                                            <DoubleAnimation Duration="0" To="0.581" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle"/>
                                            <DoubleAnimation Duration="0" To="4.875" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle"/>
                                            <DoubleAnimation Duration="0" To="1.875" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle"/>
                                            <DoubleAnimation Duration="0" To="-45" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle2"/>
                                            <DoubleAnimation Duration="0" To="0.581" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle2"/>
                                            <DoubleAnimation Duration="0" To="4.832" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle2"/>
                                            <DoubleAnimation Duration="0" To="-2.082" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle2"/>
                                            <DoubleAnimation Duration="0" To="0.889" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle1"/>
                                            <DoubleAnimation Duration="0" To="-1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle1"/>
                                            <!--<DoubleAnimation Duration="0" To="-180" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="canvas"/>-->
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle"/>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle"/>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle"/>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle"/>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="rectangle2"/>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle2"/>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle2"/>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="rectangle2"/>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="rectangle1"/>
                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="rectangle1"/>
                                            <!--<DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="canvas"/>-->
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Viewbox>
                                <Canvas x:Name="canvas" Height="24" RenderTransformOrigin="0.5,0.5" Width="24">
                                    <Canvas.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Canvas.RenderTransform>
                                    <Rectangle x:Name="rectangle" Fill="{TemplateBinding Foreground}" Height="2" Canvas.Left="3" RadiusY="0" RadiusX="0" RenderTransformOrigin="0.5,0.5" Canvas.Top="6" Width="18">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                    <Rectangle x:Name="rectangle1" Fill="{TemplateBinding Foreground}" Height="2" Canvas.Left="3" RadiusY="0" RadiusX="0" RenderTransformOrigin="0.5,0.5" Canvas.Top="11" Width="18">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                    <Rectangle x:Name="rectangle2" Fill="{TemplateBinding Foreground}" Height="2" Canvas.Left="3" RadiusY="0" RadiusX="0" RenderTransformOrigin="0.5,0.5" Canvas.Top="16" Width="18">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Canvas>
                            </Viewbox>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="True"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ContextMenu x:Key="TreeItemContextMenu" Name="contextmenu">
            <!--<Button Name="btk_mkdir" Content="新建目录" Click="Btn_upload_Click"/>-->
            <Button Command="{x:Static materialDesign:DialogHost.OpenDialogCommand}" Click="Button_Click_2">
                创建目录
            </Button>
        </ContextMenu>
        <ContextMenu x:Key="other">
            <MenuItem Header="text"/>
        </ContextMenu>
    </Window.Resources>
    <materialDesign:DialogHost BorderBrush="{DynamicResource MaterialDesignDivider}">
        <materialDesign:DialogHost.DialogContent>
            <StackPanel Margin="16">
                <StackPanel>
                    <TextBox
    Style="{StaticResource MaterialDesignFilledTextFieldTextBox}" Name="tb_newDIrName"
    VerticalAlignment="Top" MinWidth="200"
    AcceptsReturn="True"
    TextWrapping="Wrap"
    MaxWidth="400"
    materialDesign:HintAssist.Hint="输入目录名称"></TextBox>

                </StackPanel>
                <Button Style="{StaticResource MaterialDesignFlatButton}"  IsCancel="True" Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                                         CommandParameter="Sample2Cancel" HorizontalAlignment="Center" Click="cmBtn_createCata">OK</Button>
                <Button Style="{StaticResource MaterialDesignFlatButton}"  IsCancel="True" Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                                         CommandParameter="Sample2Cancel" HorizontalAlignment="Center">CANCEL</Button>
            </StackPanel>
        </materialDesign:DialogHost.DialogContent>
            <Grid>
        
        <Grid.RowDefinitions>
            <RowDefinition Height="30"></RowDefinition>
            <RowDefinition></RowDefinition>
            <RowDefinition Height="auto"></RowDefinition>
        </Grid.RowDefinitions>
        <Button Click="Button_Click" Content="test" FontSize="20"/>
        <TextBlock Name="filepath"/>
            <TreeView  TreeViewItem.Selected="Tree_Selected" SelectedItemChanged="Tree_SelectedItemChanged"   PreviewMouseRightButtonDown="Tree_MouseRightButtonDown"  Grid.Row="1" Name="tree"   RenderTransformOrigin="0.5,0.5" >
             
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate DataType="{x:Type model:NodeItem}" ItemsSource="{Binding Children}">
                    <StackPanel Orientation="Horizontal" Background="Transparent">
                            <StackPanel.Style>
                                <Style TargetType="StackPanel">
                                    <Style.Triggers>
                                         <DataTrigger Binding="{Binding IsDir}" Value="true" >
                                            <Setter Property="ContextMenu" Value="{StaticResource TreeItemContextMenu}"/>
                                         </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>
                        <TextBlock FontWeight="Bold" Foreground="{Binding ImagePath,Converter={StaticResource foregroundconverter}}" FontFamily="/asset/font/#iconfont" FontSize="30" Text="{Binding ImagePath,Converter={StaticResource fontconverter}}"/>

                        <TextBlock Text="{Binding Name}" FontSize="15" Margin="5,0,0,0" VerticalAlignment="Center"/>
                    </StackPanel>
                </HierarchicalDataTemplate>

            </TreeView.ItemTemplate>
            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem" >
                        <EventSetter Event="Selected" Handler="TreeViewItem_Selected"/>
                        <EventSetter Event="Drop" Handler="TreeViewItem_Drop"/>
                        <EventSetter Event="Expanded" Handler="TreeViewItem_Expanded"/>
                     
                        <Setter Property="AllowDrop" Value="True"/>
                        <Setter Property="Tag" Value="{Binding}"/>
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"   />
                        <Setter Property="IsSelected" Value="{Binding IsSelected,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"/>
                        <Style.Triggers>

                           
                            <!--<Trigger Property="IsExpanded" Value="true">
                                <Setter Property="IsSelected" Value="True"></Setter>
                            </Trigger>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="IsSelected" Value="False"></Setter>
                            </Trigger>-->
                            <!--<Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="IsSelected" Value="True"/>
                            </Trigger>-->
                        </Style.Triggers>
                       
                </Style>
            </TreeView.ItemContainerStyle>
        </TreeView>
            <materialDesign:DrawerHost HorizontalAlignment="Right" Background="#FFFFFF" Grid.Row="1" VerticalAlignment="Top"  Grid.RowSpan="1" 
            IsLeftDrawerOpen="{Binding ElementName=MenuToggleButton, Path=IsChecked}">
                <materialDesign:DrawerHost.LeftDrawerContent>



                    <Border Name="bd_search" Opacity="100" HorizontalAlignment="Right" Background="#FFFFFF"  Padding="5" RenderTransformOrigin="0.5,0.5">
                        <Border.Effect>
                            <DropShadowEffect BlurRadius="5" Color="#EEEEEE" Direction="-90" ShadowDepth="10"/>
                        </Border.Effect>
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                                <TranslateTransform x:Name="xpos" X="0"/>
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="50"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton HorizontalAlignment="Left" 
                                      Style="{StaticResource ToggleButtonStyle}"
                                      IsChecked="{Binding ElementName=MenuToggleButton, Path=IsChecked, Mode=TwoWay}"/>
                            <TextBlock Text="查找结果" FontSize="20" HorizontalAlignment="Center" >
                                <TextBlock.Foreground>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFDDDDDD" Offset="0"/>
                                        <GradientStop Color="#FF342828" Offset="0.986"/>
                                    </LinearGradientBrush>
                                </TextBlock.Foreground>
                            </TextBlock>
                            <!--<ListView  Name="lv_findresult" >
                    <ListView.View>
                        <GridView>
                            
                            <GridViewColumn  DisplayMemberBinding="{Binding Name}"  Header="Name" />
                            <GridViewColumn Width="200" DisplayMemberBinding="{Binding Path}"   Header="Path" />
                            <GridViewColumn  DisplayMemberBinding="{Binding Size}"   Header="Size" />
                            <GridViewColumn Width="200" DisplayMemberBinding="{Binding Modified}"  Header="ModifiedTime" />
                        </GridView>
                    </ListView.View>
                </ListView>-->

                            <DataGrid IsReadOnly="True" PreviewMouseDoubleClick="Lv_findresult_PreviewMouseDoubleClick" RowHeaderWidth="50" AlternatingRowBackground="LightBlue" Grid.Row="1" SelectionUnit="Cell" CurrentCellChanged="Lv_findresult_CurrentCellChanged"   Name="lv_findresult"  ScrollViewer.CanContentScroll="True" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto"  AutoGenerateColumns="False">
                                <DataGrid.Columns>
                                    <DataGridTextColumn  Header="Name" Binding="{Binding Name}"/>
                                    <DataGridTextColumn  Header="Path" Binding="{Binding Path}" IsReadOnly="True" />
                                    <DataGridTextColumn  Header="Size" Binding="{Binding Size}" />
                                    <DataGridTextColumn  Header="ModifiedTime" Binding="{Binding Modified}"/>
                                    
                                </DataGrid.Columns>
                            </DataGrid>

                        </Grid>


                    </Border>

                </materialDesign:DrawerHost.LeftDrawerContent>
                <ToggleButton       VerticalAlignment="Top"
                                x:Name="MenuToggleButton"
                                Style="{StaticResource ToggleButtonStyle}"
                                IsChecked="False"
                               
                                AutomationProperties.Name="HamburgerToggleButton"/>
            </materialDesign:DrawerHost>
            <StackPanel Grid.Row="2" Orientation="Horizontal">
            <TextBox IsReadOnly="True" TextWrapping="Wrap" Name="tb_currentPath"  Text="/" IsEnabled="True" MinWidth="300" MaxWidth="500"  Margin="5" FontSize="13" Background="#B1BABF" VerticalContentAlignment="Center"/>
            <Button Content="上传文件" Name="uploadbtn" Click="Uploadbtn_Click"/>
            <Button Content="上传目录" Name="uploadCatabtn" Margin="3,0,0,0" Click="UploadCatabtn_Click"/>
            <TextBox  Grid.Column="0" VerticalAlignment="Center" Height="30" Name="tb_search" Margin="10,0,5,0"  Style="{StaticResource SearchBoxStyle }" Width="200" HorizontalAlignment="Left"></TextBox>
            <Button Content="Search" Click="Button_Click_1" IsDefault="True"/>
        </StackPanel>
        <Border Grid.RowSpan="2" IsHitTestVisible="False" Opacity="0" Grid.Row="1" Background="DarkGray" Name="bd_mask">
                <Grid>
                    
            <ProgressBar  Width="100" Height="100"
            Style="{StaticResource MaterialDesignCircularProgressBar}" IsHitTestVisible="False"
            Value="35"
            IsIndeterminate="True" />
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal">
                        <TextBlock Name="tb_currentfilecount" Text="{Binding CurrentFileCount,RelativeSource={RelativeSource AncestorType=Window},Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock Text="/"/>
                        <TextBlock Name="tb_totalfilecount" Text="{Binding TotalFileCount,RelativeSource={RelativeSource AncestorType=Window},Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                    </StackPanel>
                </Grid>
            </Border>
    </Grid>
    </materialDesign:DialogHost>
</Window>
